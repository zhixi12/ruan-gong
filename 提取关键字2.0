count_t=0
count_s=0
count_c=[]
count_ie=0
count_iei=0
num=0
txt=[]
stack=[]#堆栈解决if else匹配问题
def count_total(*x):
    k=x[0]#txt数组降维
    global count_t
    for l in k:#k数组降维，l为一维数组
        if 'auto' in l:#匹配关键字
            count_t+=1
        if 'break' in l:
            count_t+=1
        if 'case' in l:
            count_t+=1
        if 'const' in l:
            count_t+=1
        if 'continue' in l:
            count_t+=1
        if 'default' in l:
            count_t+=1
        if 'double' in l:
            count_t+=1
        elif 'do' in l:
            count_t+=1
        if 'else' in l:
            count_t+=1
        if 'enum' in l:
            count_t+=1
        if 'extern' in l:
            count_t+=1
        if 'float' in l:
            count_t+=1
        if 'for' in l:
            count_t+=1
        if 'goto' in l:
            count_t+=1
        if 'if' in l:
            count_t+=1
        if 'int' in l:
            count_t+=1
        if 'long' in l:
            count_t+=1
        if 'register' in l:
            count_t+=1
        if 'return' in l:
            count_t+=1
        if 'short' in l:
            count_t+=1
        if 'signed' in l:
            count_t+=1
        if 'sizeof' in l:
            count_t+=1
        if 'static' in l:
            count_t+=1
        if 'struct' in l:
            count_t+=1
        if 'switch' in l:
            count_t+=1
        if 'typedef' in l:
            count_t+=1
        if 'union' in l:
            count_t+=1
        if 'unsigned' in l:
            count_t+=1
        if 'void' in l:
            count_t+=1
        if 'volatile' in l:
            count_t+=1
        if 'while' in l:
            count_t+=1
def count_switch(num,*x):
    l=x[0]
    if 'switch' in l:#判断switch
        global count_s
        count_s+=1
        count_case(0,num)
def count_case(count_ca,p):
    while (1):
        if 'default' in txt[p]:
            break
        if 'case' in txt[p]:#判断case
            count_ca+=1
        p+=1
    count_c.append(count_ca)
def count_ifelse(*x):
    l=x[0]
    flag=0
    global count_ie
    global count_iei
    if l[0] == 'i' and l[1] == 'f':#判断if
        stack.append(1)
    if l[0] == 'e' and l[4] == 'i':#判断elseif
        stack.append(3)
    elif l[0] == 'e' and l[1] == 'l':#判断else
        while (stack[-1] != 1):
            if (stack[-1] == 3):
                flag=1
            stack.pop()
        stack.pop()
        if flag == 0:
            count_ie+=1
        if flag ==1:
            count_iei+=1
def main():
    add=input ('请输入代码存放地址：')
    f = open(add,encoding="utf-8")#主函数开始
    for line in f:#按行读入文件
        line = line.replace('\n',"").replace(' ',"").replace('\xa0',"")
        txt.append(line)
    #print(txt)
if __name__ == '__main__':
    main()
    level=input('请输入要完成的等级：')
    level=int(level)
    count_total(txt)
    for x in txt:
        count_switch(num,x)#nun记录循环次数，方便下标索引list
        count_ifelse(x)
        num+=1
    if level >= 1:
        print('total num: ',count_t)
    if level >= 2:
        print('switch num: ',count_s)
        print('case num: ',count_c)
    if level >= 3:    
        print('if-else num: ',count_ie)
    if level >= 4:
        print('if-elseif-else num: ',count_iei)
